package com.yhchat.canary.ui.group

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.yhchat.canary.data.model.GroupDetail
import com.yhchat.canary.data.model.GroupMemberInfo
import com.yhchat.canary.data.repository.GroupRepository
import com.yhchat.canary.data.repository.TokenRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

data class GroupInfoUiState(
    val isLoading: Boolean = false,
    val error: String? = null,
    val groupInfo: GroupDetail? = null,
    val members: List<GroupMemberInfo> = emptyList(),
    val isLoadingMembers: Boolean = false,
    val currentPage: Int = 1,
    val hasMoreMembers: Boolean = true,
    val isLoadingMoreMembers: Boolean = false
)

@HiltViewModel
class GroupInfoViewModel @Inject constructor(
    private val groupRepository: GroupRepository,
    private val tokenRepository: TokenRepository
) : ViewModel() {
    
    private val tag = "GroupInfoViewModel"
    
    private val _uiState = MutableStateFlow(GroupInfoUiState())
    val uiState: StateFlow<GroupInfoUiState> = _uiState.asStateFlow()
    
    init {
        groupRepository.setTokenRepository(tokenRepository)
    }
    
    /**
     * Âä†ËΩΩÁæ§ËÅä‰ø°ÊÅØ
     */
    fun loadGroupInfo(groupId: String) {
        viewModelScope.launch {
            Log.d(tag, "Starting to load group info for: $groupId")
            _uiState.value = _uiState.value.copy(isLoading = true, error = null)
            
            groupRepository.getGroupInfo(groupId).fold(
                onSuccess = { groupInfo ->
                    Log.d(tag, "‚úÖ Group info loaded successfully: ${groupInfo.name}, members: ${groupInfo.memberCount}")
                    _uiState.value = _uiState.value.copy(
                        isLoading = false,
                        groupInfo = groupInfo
                    )
                    
                    // Ëá™Âä®Âä†ËΩΩÁæ§ÊàêÂëò
                    loadGroupMembers(groupId)
                },
                onFailure = { error ->
                    Log.e(tag, "‚ùå Failed to load group info for $groupId", error)
                    Log.e(tag, "Error message: ${error.message}")
                    Log.e(tag, "Error stacktrace: ${error.stackTraceToString()}")
                    _uiState.value = _uiState.value.copy(
                        isLoading = false,
                        error = error.message ?: "Âä†ËΩΩÁæ§ËÅä‰ø°ÊÅØÂ§±Ë¥•"
                    )
                }
            )
        }
    }
    
    /**
     * Âä†ËΩΩÁæ§ÊàêÂëòÂàóË°®ÔºàÁ¨¨‰∏ÄÈ°µÔºâ
     */
    fun loadGroupMembers(groupId: String) {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(
                isLoadingMembers = true,
                currentPage = 1,
                members = emptyList(),
                hasMoreMembers = true
            )
            
            groupRepository.getGroupMembers(groupId, size = 50, page = 1).fold(
                onSuccess = { members ->
                    _uiState.value = _uiState.value.copy(
                        isLoadingMembers = false,
                        members = members,
                        currentPage = 1,
                        hasMoreMembers = members.size >= 50 // Â¶ÇÊûúËøîÂõû50‰∏™ÔºåÂèØËÉΩËøòÊúâÊõ¥Â§ö
                    )
                    Log.d(tag, "Group members loaded: ${members.size}, hasMore: ${members.size >= 50}")
                },
                onFailure = { error ->
                    Log.e(tag, "Failed to load group members", error)
                    _uiState.value = _uiState.value.copy(
                        isLoadingMembers = false,
                        hasMoreMembers = false
                    )
                }
            )
        }
    }
    
    /**
     * Âä†ËΩΩÊõ¥Â§öÁæ§ÊàêÂëòÔºà‰∏ã‰∏ÄÈ°µÔºâ
     */
    fun loadMoreMembers(groupId: String) {
        val currentState = _uiState.value
        
        Log.d(tag, "üìã loadMoreMembers called - isLoadingMore: ${currentState.isLoadingMoreMembers}, hasMore: ${currentState.hasMoreMembers}, currentPage: ${currentState.currentPage}")
        
        // Â¶ÇÊûúÊ≠£Âú®Âä†ËΩΩÊàñÊ≤°ÊúâÊõ¥Â§öÊï∞ÊçÆÔºåÂàô‰∏çÊâßË°å
        if (currentState.isLoadingMoreMembers) {
            Log.d(tag, "‚è∏Ô∏è Already loading more members, skipping...")
            return
        }
        
        if (!currentState.hasMoreMembers) {
            Log.d(tag, "‚è∏Ô∏è No more members to load, skipping...")
            return
        }
        
        viewModelScope.launch {
            val nextPage = currentState.currentPage + 1
            _uiState.value = _uiState.value.copy(isLoadingMoreMembers = true)
            
            Log.d(tag, "üì• Loading more members for group: $groupId, page: $nextPage")
            
            groupRepository.getGroupMembers(groupId, size = 50, page = nextPage).fold(
                onSuccess = { newMembers ->
                    val allMembers = _uiState.value.members + newMembers
                    val hasMore = newMembers.size >= 50
                    
                    _uiState.value = _uiState.value.copy(
                        isLoadingMoreMembers = false,
                        members = allMembers,
                        currentPage = nextPage,
                        hasMoreMembers = hasMore
                    )
                    
                    Log.d(tag, "‚úÖ Page $nextPage loaded: ${newMembers.size} new members, total: ${allMembers.size}, hasMore: $hasMore")
                },
                onFailure = { error ->
                    Log.e(tag, "‚ùå Failed to load page $nextPage", error)
                    _uiState.value = _uiState.value.copy(
                        isLoadingMoreMembers = false,
                        hasMoreMembers = false
                    )
                }
            )
        }
    }
    
    /**
     * Ê∏ÖÈô§ÈîôËØØ
     */
    fun clearError() {
        _uiState.value = _uiState.value.copy(error = null)
    }
}

